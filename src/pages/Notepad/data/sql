-- DATA TYPES
-- String
CHAR(size)		-- Fixed amount of characters
VARCHAR(size)	-- Variable characters (scale with recorded size) (max 65535 characters)
TEXT			-- TINYTEXT, TEXT, MEDIUMTEXT, LONGTEXT (TEXT is same size as unsigned SMALLINT (65535 characters))

-- Numbers
TINYINT			-- range -128 - 127 or 255
SMALLINT		-- range -32,768 - 32,767 or 65,535
MEDIUMINT		-- range -8,388,608 - 8,388,607 or 16,777,215
INT				-- range -2,147,483,648 - 2,147,483,647 or 4,294,967,295
BIGINT			-- range -9,223,372,036,854,775,808 - 9,223,372,036,854,775,807 or 18,446,744,073,709,551,615

DECIMAL(4,2)	-- Decimal numbers (4 = total digits, 2 = digits after decimal point) = 99.99

ENUM('Male', 'Female', 'Other')	-- Readable as string, queries with numbers (1, 2, 3)

-- Date
DATE			-- YYYY-MM-DD
DATETIME		-- YYYY-MM-DD HH:MM:SS
TIMESTAMP		-- YYYY-MM-DD HH:MM:SS (2x smaller than DATETIME) (Min 1970-01-01, Max 2038-01-19) (Include UTC time zone handler)
TIME			-- HH:MM:SS
YEAR			-- YYYY

-- Create and use database
CREATE DATABASE {test_db};
USE {test_db};

-- Delete database and table
DROP test_db;
DROP test_table;

--- SHOW
SHOW TABLES; -- Show tables
SHOW CREATE TABLE test_table; -- Show create table query
SHOW INDEXES FROM test_table; -- Show indexes
DESCRIBE test_table; -- Show table structure

-- EXPLAIN (doesn't run query)
EXPLAIN SELECT * FROM test_table WHERE created > '2023-01-01'; -- Show query execution plan (possible_keys, key, key_len, ref, rows, filtered, Extra)
EXPLAIN FORMAT=tree SELECT * FROM test_table WHERE name = 'John' AND created > '2023-01-01'; -- Show cost and rows for each step (lower cost is better)
EXPLAIN ANALYZE SELECT * FROM test_table WHERE name = 'John' AND created > '2023-01-01'; -- Show same as tree and the time used in query (it runs the query)


-- INDEX
count(DISTINCT EMAIL) / count(*); -- Index selectivity (lower is better)
ALTER TABLE test_table ADD INDEX (email); -- Add secondary index
ALTER TABLE test_table ADD INDEX (email(5)); -- Add secondary index with length (can't use with order by or group by)
-- random has index and email can be queried after it with an index (email can't be used without using random first)
ALTER TABLE test_table ADD INDEX (random, email); -- Left to right, no skipping. Stops at the first range.
ALTER TABLE test_table DROP INDEX email; -- Remove index

-- PRIMARY and FOREIGN KEY
CREATE TABLE test_table (
	id BIGINT unsigned AUTO_INCREMENT PRIMARY KEY,
	name VARCHAR(255) NOT NULL,
	is_checked BOOLEAN DEFAULT 0 NOT NULL, -- 0 or 1
	price DECIMAL(3,2) -- 9.99
	random INT INVISIBLE, -- INVISIBLE column (not shown in SELECT *, unless specified) (can also be set to VISIBLE)
	gender ENUM('male', 'female', 'other'),
	email VARCHAR(255) UNIQUE,
	domain SUBSTRING_INDEX(email, '@', -1), -- Get domain from email
	text VARCHAR(255) DEFAULT 'default text',
	created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
);

CREATE TABLE test_table2 (
	id BIGINT unsigned AUTO_INCREMENT,
	test_table_id BIGINT unsigned NOT NULL,
	name VARCHAR(255) NOT NULL,
	PRIMARY KEY (id),
	FOREIGN KEY (test_table_id) REFERENCES test_table(id)
);

-- Add new data
INSERT INTO test_table (name) VALUES ('test1');
INSERT INTO test_table (name, price) VALUES ('test1', 12.5), ('test2', NULL);

-- Add new column "info"
ALTER TABLE test_table ADD info VARCHAR(255);
-- Change column type
ALTER TABLE test_table ALTER COLUMN price INT;
-- Rename column
ALTER TABLE test_table RENAME COLUMN old_name to new_name;
-- Delete column "info"
ALTER TABLE test_table DROP COLUMN price;

-- Update data
UPDATE test_table SET price = 9.99 WHERE id = 1;
UPDATE test_table SET price = 9.99, random = 420 WHERE id = 1;

-- Delete data
DELETE FROM test_table WHERE id = 1;

-- SELECT
SELECT * FROM test_table; -- Select all
SELECT COUNT(*) FROM test_table; -- Count rows
SELECT name, price FROM test_table LIMIT 10 ORDER BY created DESC; -- Select rows 1-10 (always use ORDER BY with LIMIT or sql may order by random)
SELECT name, price FROM test_table LIMIT 10 OFFSET 10 ORDER BY created DESC; -- Select rows 11-20
SELECT price as Price FROM test_table; -- Select column with alias
SELECT DISTINCT name FROM test_table; -- Select rows with unique values
SELECT * FROM test_table WHERE id = 1 AND (name = 'test' OR name = 'test1');
SELECT * FROM test_table WHERE NOT id = 1;
SELECT * FROM test_table WHERE year BETWEEN 1990 AND 2020;
SELECT * FROM test_table
	WHERE id = 1 AND
		name = 'test1' AND
		year > 2020 AND
		price IS NOT NULL AND
		random IS NULL
	ORDER BY name DESC;

SELECT * FROM test_table WHERE name LIKE '%st%'; -- % = any characters

-- JOIN (default: inner join) (left join, right join)
SELECT * FROM test_table
	JOIN test_table2 ON test_table.id = test_table2.test_table_id;
SELECT test_table.price, test_table2.name FROM test_table
	JOIN test_table2 ON test_table.id = test_table2.test_table_id;

-- Many to many
SELECT * FROM test_table
	JOIN test_table2 ON test_table2.test_table_id = test_table.id
	JOIN test_table3 ON test_table3.test_table2_id = test_table2.id;

-- GROUP BY
SELECT name, COUNT(*) FROM test_table GROUP BY name;
SELECT name, COUNT(*) FROM test_table GROUP BY name HAVING COUNT(*) > 1; -- HAVING = WHERE for GROUP BY

-- Add constraint
ALTER TABLE test_table ADD CHECK (gender in ('male', 'female', 'other'));
-- Add constraint with name
ALTER TABLE test_table ADD CONSTRAINT check_gender CHECK (gender in ('male', 'female', 'other'));
-- Remove constraint
ALTER TABLE test_table DROP CHECK check_gender;
